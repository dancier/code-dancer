version: '3.8'

services:
  chat-dancer:
    container_name: chat-dancer
    image: dancier/chat-dancer:${CHAT_DANCER_TAG}
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: ${CHAT_DANCER_SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${CHAT_DANCER_SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${CHAT_DANCER_SPRING_DATASOURCE_PASSWORD}
    ports:
      - "9999:8080"
    depends_on:
      - chat-dancer-db
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-chat-dancer
  chat-dancer-db:
    container_name: chat-dancer-db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${CHAT_DANCER_DB_USER}
      POSTGRES_PASSWORD: ${CHAT_DANCER_DB_PASSWORD}
      POSTGRES_DB: ${CHAT_DANCER_DB}
    volumes:
      - ./volumes/chat-dancer-data:/var/lib/postgresql/data
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: db-chat-dancer
    depends_on:
      - fluentd
  dancer:
    container_name: dancer
    image: dancier/dancer:${DANCER_TAG:-1.0}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dancer.rule=Host(`${BACKEND_HOSTNAME}`)"
      - "traefik.http.routers.dancer.entrypoints=websecure"
      - "traefik.http.routers.dancer.tls.certresolver=mytlschallenge"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      APP_AUTH_TOKENSECRET: ${APP_AUTH_TOKENSECRET}
      APP_CORS_ALLOWED_ORIGINS: ${APP_CORS_ALLOWED_ORIGINS}
      APP_MAIL_USER: ${APP_MAIL_USER}
      APP_MAIL_PASS: ${APP_MAIL_PASS}
      APP_CAPTCHA_APIKEY: ${APP_CAPTCHA_APIKEY}
      APP_CAPTCHA_MAGICTOKEN: ${APP_CAPTCHA_MAGICTOKEN}
      APP_ADMIN_EMAIL: ${APP_ADMIN_EMAIL}
      APP_ADMIN_PASS: ${APP_ADMIN_PASS}
      APP_S3_HOST: ${S3_HOST}
      APP_S3_STSENDPOINT: https://${S3_HOST}
      APP_S3_OIDC_TOKENURI: ${DANCIER_TOKEN_URI}
      APP_S3_OIDC_CLIENTID: ${S3_OIDC_CLIENT_ID}
      APP_S3_OIDC_CLIENTSECRET: ${S3_CLIENT_SECRET}
    volumes:
      - ./volumes/dancer-media/images:/images-dir
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-dancer
    depends_on:
      - dancer-db
      - traefik
      - fluentd
      - iam
  dancer-db:
    container_name: dancer-db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DANCER_DB_USER}
      POSTGRES_PASSWORD: ${DANCER_DB_PASSWORD}
      POSTGRES_DB: ${DANCER_DB_DB}
    volumes:
      - ./volumes/dancer-data:/var/lib/postgresql/data
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: db-dancer
  fluentd:
    container_name: fluentd
    build: ./fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/conf:/fluentd/etc
    ports:
      - "127.0.0.1:24224:24224"
      - "127.0.0.1:24224:24224/udp"
    environment:
      ELASTIC_HOST: ${ELASTIC_HOST}
      ELASTIC_USER: ${ELASTIC_USER}
      ELASTIC_PASS: ${ELASTIC_PASS}
    logging:
      options:
        max-size: 200m
  iam:
    container_name: iam
    build: ./iam
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.test-iam.rule=Host(`${IAM_HOST}`)"
      - "traefik.http.routers.test-iam.entrypoints=websecure"
      - "traefik.http.routers.test-iam.tls.certresolver=mytlschallenge"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 2s
      retries: 15
    depends_on:
      - iam-db
    environment:
       KC_PROXY: edge
       KC_HOSTNAME: ${IAM_HOST}
       KEYCLOAK_ADMIN: admin
       KEYCLOAK_ADMIN_PASSWORD: ${IAM_ADMIN_PASSWD}
       KEYCLOAK_LOGLEVEL: INFO
       PROXY_ADDRESS_FORWARDING: "true"
       KC_DB: postgres
       KC_DB_URL: jdbc:postgresql://iam-db:5432/keycloak
       KC_DB_USERNAME: keycloak
       KC_DB_PASSWORD: ${IAM_ADMIN_PASSWD}
    command:
      start --optimized
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-iam
      

  iam-db:
    image: 'postgres:15'
    container_name: iam-db
    volumes:
      - ./volumes/iam-db:/var/lib/postgresql/data
    restart: 'unless-stopped'
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${IAM_ADMIN_PASSWD}
      POSTGRES_DB: keycloak
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: db-iam
  kafka:
    container_name: kafka
    image: bitnami/kafka:3.3.1
    environment:
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: r7dMBY60T16TrNCGeXniLw
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: BROKER://:9092 ,CONTROLLER://:9093, LOCALHOST://:9081
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT, CONTROLLER:PLAINTEXT, LOCALHOST:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://kafka:9092, LOCALHOST://localhost:9081
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - ./volumes/kafka:/bitnami/kafka
    ports:
      - 127.0.0.1:9092:9081
      - 127.0.0.1:9081:9081
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-kafka
    depends_on:
      - fluentd


  kafka-ui:
    container_name: kafka-ui
    image: tchiotludo/akhq:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka.rule=Host(`${KAFKA_UI_HOSTNAME}`)"
      - "traefik.http.routers.kafka.entrypoints=websecure"
      - "traefik.http.routers.kafka.tls.certresolver=mytlschallenge"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ui"]
      interval: 10s
      timeout: 2s
    expose:
      - "8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-kafka-ui
    depends_on:
      - fluentd


  kikeriki:
    container_name: kikeriki
    image: dancier/kikeriki:${KIKERIKI_TAG}
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: json-logging
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-kikeriki
  pg-admin:
    container_name: pg-admin
    image: dpage/pgadmin4:7
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PG_ADMIN_HOSTNAME}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=mytlschallenge"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dancier.net
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 10
      PG_ADMIN_OAUTH_SECRET: ${PG_ADMIN_OAUTH_SECRET}
      PG_ADMIN_OAUTH2_TOKEN_URL: ${PG_ADMIN_OAUTH2_TOKEN_URL}
      PG_ADMIN_OAUTH2_AUTHORIZATION_URL: ${PG_ADMIN_OAUTH2_AUTHORIZATION_URL}
      PG_ADMIN_OAUTH2_API_BASE_URL=https: ${PG_ADMIN_OAUTH2_API_BASE_URL}
      PG_ADMIN_OAUTH2_USERINFO_ENDPOINT: ${PG_ADMIN_OAUTH2_USERINFO_ENDPOINT}
      PG_ADMIN_OAUTH2_SERVER_METADATA_URL: ${PG_ADMIN_OAUTH2_SERVER_METADATA_URL}

    depends_on:
      - dancer-db
      - traefik
    volumes:
      - ./volumes/pg-admin-data:/var/lib/pgadmin
      - ./code-dancer/iac/core/pg-admin/config_local.py:/pgadmin4/config_local.py
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_UI_HOST}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=mytlschallenge"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./volumes/prometheus:/prometheus
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-prometheus

  recommendation:
    container_name: recommendation
    image: dancier/recommendation:${RECOMMENDATION_TAG}
    restart: unless-stopped
    environment:
      DB_USER: ${RECOMMENDATION_DB_USER}
      DB_PASS: ${RECOMMENDATION_DB_PASSWORD}
      DB_NAME: ${RECOMMENDATION_DB}
      DB_HOST: recommendation-db
      S3_SECRET: ${RECOMMENDATION_S3_SECRET}
      S3_TOKENURI: ${RECOMMENDATION_S3_TOKENURI}
      S3_STS_ENDPOINT: ${RECOMMENDATION_S3_STS_ENDPOINT}
      S3_HOST: ${RECOMMENDATION_S3_HOST}
    ports:
      - "5000:80"
    depends_on:
      - recommendation-db
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-recommendation
  recommendation-db:
    container_name: recommendation-db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${RECOMMENDATION_DB_USER}
      POSTGRES_PASSWORD: ${RECOMMENDATION_DB_PASSWORD}
      POSTGRES_DB: ${RECOMMENDATION_DB}
    volumes:
      - ./volumes/recommendation-data:/var/lib/postgresql/data
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: db-recommendation
  s3:
    container_name: s3
    image: minio/minio
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.s3.rule=Host(`${S3_HOST}`)"
      - "traefik.http.routers.s3.entrypoints=websecure"
      - "traefik.http.routers.s3.tls.certresolver=mytlschallenge"
      - "traefik.http.routers.s3.service=s3"
      - "traefik.http.services.s3.loadbalancer.server.port=9000"

      - "traefik.http.routers.s3-ui.rule=Host(`${S3_UI_HOST}`)"
      - "traefik.http.routers.s3-ui.entrypoints=websecure"
      - "traefik.http.routers.s3-ui.tls.certresolver=mytlschallenge"
      - "traefik.http.routers.s3-ui.service=s3-ui"
      - "traefik.http.services.s3-ui.loadbalancer.server.port=9001"
    volumes:
      - ./volumes/s3:/data
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: ${S3_ADMIN_PASSWD}
      MINIO_BROWSER_REDIRECT_URL: https://${S3_UI_HOST}
      MINIO_SERVER_URL: https://${S3_HOST}
      MINIO_IDENTITY_OPENID_CONFIG_URL: ${S3_OPENID_CONFIG_URL}
      MINIO_IDENTITY_OPENID_CLIENT_ID: s3
      MINIO_IDENTITY_OPENID_CLIENT_SECRET: ${S3_CLIENT_SECRET}

    command: server /data --console-address ":9001"
    depends_on:
      iam:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-s3

  show-dancer:
    container_name: show-dancer
    image: dancier/show-dancer:${SHOW_DANCER_TAG}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.show-dancer.rule=Host(`${SHOW_DANCER_HOSTNAME}`)"
      - "traefik.http.routers.show-dancer.entrypoints=websecure"
      - "traefik.http.routers.show-dancer.tls.certresolver=mytlschallenge"
    environment:
      DANCIER_BACKEND_URL: ${DANCIER_BACKEND_URL}
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-show-dancer
    depends_on:
      - traefik
      - fluentd
  tool:
    container_name: tool
    image: ubuntu 
    restart: unless-stopped
    stdin_open: true
  traefik:
    container_name: traefik
    image: "traefik:v2.9"
    command:
      - "--log.level=DEBUG"
      - "--log.format=json"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      #- "--certificatesresolvers.mytlschallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.mytlschallenge.acme.email=marc@becheftigt.de"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8088:8080"
    volumes:
      - "./volumes/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
        tag: service-traefik